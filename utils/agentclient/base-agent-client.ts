import { AgentClient } from "./client/client";
import { AgentState } from "./schema/schema";

export interface BaseAgentInput {
    [key: string]: any;
}

export class BaseAgentClient {
    protected client: AgentClient;
    protected agentName: string;

    constructor(agentName: string) {
        const baseUrl = process.env.AGENT_BASE_URL || 'http://localhost:8123';
        this.agentName = agentName;
        this.client = new AgentClient(baseUrl, agentName, 30000, true);
    }

    async startAgent(input: BaseAgentInput): Promise<AgentState> {
        await this.client.updateAgent(this.agentName);

        try {
            console.log(`Starting ${this.agentName} run...`);
            const startResponse = await this.client.startAgentRun(
                null,
                input,
                null, // use default model
                null  // no thread ID -- will get generated by agent
            );
            
            console.log('Run started with ID:', startResponse.run_id);
            return startResponse;
        } catch (error) {
            console.error(`Error starting ${this.agentName} run:`, error);
            throw error;
        }
    }

    async getStatus(runId: string): Promise<AgentState> {
        await this.client.updateAgent(this.agentName);
        return await this.client.getRunStatus(runId);
    }
} 