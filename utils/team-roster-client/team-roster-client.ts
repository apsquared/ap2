import { AgentClient } from "../agentclient/client/client";
import { AgentState } from "../agentclient/schema/schema";
import { RosterAgentInput, TeamRosterState } from "./types";

const baseUrl = process.env.AGENT_BASE_URL || 'http://localhost:8123';

const TEAM_ROSTER_AGENT = 'team-roster-agent';

export async function startTeamRosterAgent(input: RosterAgentInput): Promise<AgentState> {
    const client = new AgentClient(baseUrl, TEAM_ROSTER_AGENT, 30000, true);
    await client.updateAgent(TEAM_ROSTER_AGENT);

    try {
        console.log('Starting agent run...');
        const startResponse = await client.startAgentRun(
            null,
            input,
            null, // use default model
            null  // no thread ID -- will get generated by agent
        );
        
        console.log('Run started with ID:', startResponse.run_id);
        return startResponse;
    } catch (error) {
        console.error('Error starting agent run:', error);
        throw error;
    }
}

export async function getTeamRosterAgentStatus(runId: string): Promise<AgentState> {
    const client = new AgentClient(baseUrl, TEAM_ROSTER_AGENT, 30000, true);
    await client.updateAgent(TEAM_ROSTER_AGENT);
    return await client.getRunStatus(runId);
}

